<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PWA Demo</title>
    <link rel="manifest" href="manifest.json">
</head>
<body>
    <h1>Online & Offline Page - PWA</h1>
    <p>This page works offline after first load!</p>
    <img src="images/img1.jpg" width="200">
    <img src="images/img2.jpg" width="200">
    <img src="images/img3.jpg" width="200">

    <script src="app.js"></script>
</body>
</html>

if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('service-worker.js')
            .then(reg => console.log('✅ Service Worker registered:', reg.scope))
            .catch(err => console.log('❌ Service Worker registration failed:', err));
    });
}

const CACHE_NAME = 'pwa-demo-cache-v1';
const FILES_TO_CACHE = [
    '/',
    '/index.html',
    '/app.js',
    '/manifest.json',
    '/images/img1.jpg',
    '/images/img2.jpg',
    '/images/img3.jpg'
];

// Install Event – Caching Files
self.addEventListener('install', event => {
    console.log('[Service Worker] Install');
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => {
                return cache.addAll(FILES_TO_CACHE);
            })
    );
});

// Activate Event – Cleanup old cache if any
self.addEventListener('activate', event => {
    console.log('[Service Worker] Activate');
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cache => {
                    if (cache !== CACHE_NAME) {
                        return caches.delete(cache);
                    }
                })
            );
        })
    );
});

// Fetch Event – Serve from cache or fallback to network
self.addEventListener('fetch', event => {
    console.log('[Service Worker] Fetch', event.request.url);
    event.respondWith(
        caches.match(event.request)
            .then(response => {
                return response || fetch(event.request);
            })
    );
});

{
  "name": "PWA Offline Demo",
  "short_name": "PWADemo",
  "start_url": "/index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#007bff",
  "icons": [
    {
      "src": "images/img1.jpg",
      "sizes": "192x192",
      "type": "image/jpeg"
    }
  ]
}
